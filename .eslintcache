[{"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/index.js":"1","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/App.js":"2","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/IssueHub.js":"3","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Candidate.js":"4","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateHub.js":"5","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Issue.js":"6","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateIssue.js":"7","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/LoginPage.js":"8","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/UserHandler.js":"9","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/OpinionOption.js":"10","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserHub.js":"11","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserCard.js":"12","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/DataHandler.js":"13"},{"size":239,"mtime":1609094322313,"results":"14","hashOfConfig":"15"},{"size":3407,"mtime":1609805302913,"results":"16","hashOfConfig":"15"},{"size":4758,"mtime":1609960564166,"results":"17","hashOfConfig":"15"},{"size":2325,"mtime":1609960163457,"results":"18","hashOfConfig":"15"},{"size":3030,"mtime":1609960739938,"results":"19","hashOfConfig":"15"},{"size":994,"mtime":1609960263517,"results":"20","hashOfConfig":"15"},{"size":2676,"mtime":1609960245593,"results":"21","hashOfConfig":"15"},{"size":6307,"mtime":1609810598312,"results":"22","hashOfConfig":"15"},{"size":1051,"mtime":1609786244342,"results":"23","hashOfConfig":"15"},{"size":2237,"mtime":1609712941977,"results":"24","hashOfConfig":"15"},{"size":1650,"mtime":1609805252643,"results":"25","hashOfConfig":"15"},{"size":1831,"mtime":1609805253743,"results":"26","hashOfConfig":"15"},{"size":2233,"mtime":1609960659214,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"uveo9l",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/index.js",[],["58","59"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/App.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/IssueHub.js",["60","61"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Candidate.js",["62","63","64","65"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateHub.js",["66"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Issue.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateIssue.js",["67"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/LoginPage.js",["68","69"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nconst LoginPage = (props) => {\n\n    // props - \n    //      setUser(user)  || parent function, sets user\n\n    const [ newAccount, setNewAccount ] = useState(false)\n    const [ alertMessage, setAlertMessage ] = useState(undefined)\n    const [ email, setEmail ] = useState()\n    const [ password, setPassword ] = useState()\n    const [ firstName, setFirstName ] = useState()\n    const [ lastName, setLastName ] = useState()\n\n    const loginUser = async () => {\n\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/user/login`,\n            // url: 'http://localhost:4000/user/login',\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email,\n                password: password\n            }        \n        }\n\n        const res = await axios(options)\n        if(res.data.type === 'SUCCESS') {\n            toast(res.data.message)\n            props.setUser(res.data.user)\n        } else {\n            setAlertMessage(res.data)\n            setTimeout(() => {\n                setAlertMessage('')\n            }, 10000)\n        }\n        // console.log(res)\n\n\n    }\n\n    const createNewUser = async () => {\n\n        const options = {\n            url: 'http://localhost:4000/user/new',\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email,\n                password: password,\n                firstName: firstName,\n                lastName: lastName\n            }\n        }\n\n        const res = await axios(options)\n        if(res.data.type === 'SUCCESS') {\n            props.setUser(res.data.user)\n        } else {\n            setAlertMessage(res.data)\n            setTimeout(() => {\n                setAlertMessage('')\n            }, 10000)\n        }\n        // console.log(res)\n\n    }\n\n    const toggleForm = () => {\n        setNewAccount(!newAccount)\n    }\n\n    const editValue = (e) => {\n\n        const value = e.target.value\n        switch(e.target.id) {\n            case('email-input'):\n                setEmail(value)\n                break;\n            case('password-input'):\n                setPassword(value)\n                break;\n            case('first-name-input'):\n                setFirstName(value)\n                break;\n            case('last-name-input'):\n                setLastName(value)\n                break;\n        }\n    }\n\n    const togglePasswordVisibility = () => {\n        const passwordCheckbox = document.getElementById('show-password-button')\n        const passwordInput = document.getElementById('password-input')\n        if(passwordCheckbox.checked) {\n            passwordInput.type = 'text'\n        } else {\n            passwordInput.type = 'password'\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if(newAccount) {\n            createNewUser()\n        } else {\n            loginUser()\n        }\n    }\n\n    // useEffect(() => {\n    //     // console.log(`email: ${email}, \\npassword: ${password}, \\nfirstname: ${firstName}, \\nlastname: ${lastName}`)\n    // }, [password, email, firstName, lastName])\n\n    return (\n        <div className='LoginPage'>\n\n            <div className='login-header'>\n                <h1> For All TN Admin </h1>\n            </div>\n\n            <div className='login-container'>\n\n                <h2>\n                    {(!newAccount)?`Login`:`Create Account`}\n                </h2>\n                {(alertMessage)?<span id='alert-message'>{`${alertMessage}`}</span>:null}\n                {/* {(newAccount===false)? */}\n                    <form onSubmit={handleSubmit} className='login-form'> \n                        <label htmlFor='email-input'>Email</label>\n                        <input type='email' id='email-input' onChange={editValue } required='true'></input>\n                        {(newAccount===true)?\n                            <div className='align-vertical'>\n                                <label htmlFor='first-name-input'>First Name</label>\n                                <input onChange={editValue} type='text' id='first-name-input' required='true'></input>\n                                <label htmlFor='last-name-input'>Last Name</label>\n                                <input onChange={editValue} type='text' id='last-name-input' required='true'></input>\n                            </div>\n                        : null}\n                        <label htmlFor='password-input'>Password\n                        \n                            (\n                            <input onChange={togglePasswordVisibility} type='checkbox' id='show-password-button'></input>\n                            <label htmlFor='show-password-button'>Show</label>\n                            )\n                        </label>\n                        <input onChange={editValue} type='password' id='password-input' required='true'></input>\n\n                        <button type='submit' >\n                            {(newAccount===true)?\n                                'Create Account'\n                            :\n                                'Login'\n                            }\n                        </button>\n\n                    </form>\n                {/* : */}\n                    {/* <form onSubmit={handleSubmit} className='new-account-form'> \n                        <label htmlFor='email-input'>Email</label>\n                        <input id='email-input' onChange={editValue}></input>\n\n\n                        <label htmlFor='password-input'>Password</label>\n                        <input type='password' id='password-input'></input>\n                        <button type='submit' >Create Account</button>\n                    </form> */}\n                {/* } */}\n                <button onClick={toggleForm}>\n                    {(!newAccount) ? `New Account` : `Use Existing Account`}\n                </button>\n\n\n            </div>\n        </div>\n    );\n}\n\nexport default LoginPage","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/UserHandler.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/OpinionOption.js",["70"],"import {useState, useEffect} from \"react\"\n\nconst OpinionOption = (props) => {\n\n    // props - \n    //      opinion (yes, leans-yes, neutral, leans-no, no)\n    //      cId (candidate id)\n    //      initSelected (true/ false) - set true if it is candidate opinion\n    //      issue\n    //      onUpdate(opinionStr)\n\n    const [ selectedStr, setSelectedStr ] = useState('') // Only 'selected' or ''\n    const [ opinionStr, setOpinionStr ] = useState('') // Yes, Leans Yes, Neutral, Leans No, No\n    const [ selected, setSelected ] = useState(false) // true or false\n\n    const updateView = (e) => {\n        setSelectedStr(e.target.checked)\n        props.updateView(opinionStr)\n    }\n\n    useEffect(() => {\n        let str = props.opinion.split('-')\n        if(str.length > 1) {\n            let first = str[0].charAt(0).toUpperCase() + str[0].slice(1)\n            let second = str[1].charAt(0).toUpperCase() + str[1].slice(1)\n            setOpinionStr(`${first} ${second}`)\n        } else {\n            let first = str[0].charAt(0).toUpperCase() + str[0].slice(1)\n            setOpinionStr(first)\n        }\n        // setSelected(props.initSelected)\n    }, [])\n\n    useEffect(() => {\n        setSelected(props.initSelected)\n    }, [props.initSelected])\n\n    useEffect(() => {\n        if(selected) {\n            setSelectedStr('selected')\n        } else {\n            setSelectedStr('')\n        }\n    }, [selected])\n\n    return (\n\n        <label className={`vertical-words opinion ${props.opinion} ${selectedStr}`} htmlFor={`${props.opinion}-${props.cId}-${props.issue.issue.title}`}>\n            {opinionStr}\n            <input onChange={updateView} type='radio' value={opinionStr} id={`${props.opinion}-${props.cId}-${props.issue.issue.title}`} name='Candidate Opinion' checked={selected} ></input>\n        </label>\n\n\n        // <label className={`vertical-words opinion ${props.opinion} `} id={`${props.opinion}-${props.cId}-${props.issue.issue.title}-label`} htmlFor={`${props.opinion}-${props.cId}-${props.issue.issue.title}`}>Yes\n        //     <input type='radio' value=\"Yes\" id={`${props.opinion}-${props.cId}-${props.issue.issue.title}`} name=\"candidate-opinion\"  ></input>\n        // </label>\n    );\n}\n\nexport default OpinionOption","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserHub.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserCard.js",["71"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport UserHandler from \"../modules/UserHandler.js\"\n\nconst UserCard = (props) => {\n\n    // props -\n    //      user\n\n    const [ isAdmin, setIsAdmin ] = useState(false)\n    const [ checked, setChecked ] = useState(false)\n\n    const updateAdminStatus = async (e) => {\n\n        setChecked(!checked)\n\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/update/admin`,\n\n            // url: 'http://localhost:4000/update/admin',\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                userToAdmin: props.user._id,\n                adminStatus: isAdmin,\n                user: UserHandler.getCurrentUser()._id\n            }\n        }\n\n        const res = await axios(options)\n        if(res.data.type === 'SUCCESS') {\n            setIsAdmin(checked)\n            toast(res.data.message)\n        } else {\n            setChecked(isAdmin)\n            toast(res.data.message)\n        }\n\n    }\n\n    useEffect(() => {\n        setIsAdmin(props.user.admin)\n        setChecked(props.user.admin)\n    }, [])\n\n    return(\n        <div className='UserCard' id={`user-${props.user._id}`} >\n            <div>\n                {`${props.user.first_name} ${props.user.last_name}`}\n            </div>\n            <div>\n                {`${props.user.email}`}\n            </div>\n            <div>\n                <label htmlFor='user-admin-checkbox'>Admin </label>\n                <input onChange={updateAdminStatus} id='user-admin-checkbox' type='checkbox' checked={checked} ></input>\n            </div>\n        </div>\n    );\n}\n\nexport default UserCard;","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/DataHandler.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":104,"column":9,"nodeType":"78","messageId":"79","endLine":111,"endColumn":10},{"ruleId":"80","severity":1,"message":"81","line":118,"column":8,"nodeType":"82","endLine":118,"endColumn":17,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":2,"column":30,"nodeType":"86","messageId":"87","endLine":2,"endColumn":39},{"ruleId":"80","severity":1,"message":"88","line":18,"column":8,"nodeType":"82","endLine":18,"endColumn":10,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":27,"column":29,"nodeType":"92","endLine":27,"endColumn":118},{"ruleId":"90","severity":1,"message":"91","line":29,"column":29,"nodeType":"92","endLine":29,"endColumn":138},{"ruleId":"76","severity":1,"message":"77","line":33,"column":9,"nodeType":"78","messageId":"79","endLine":44,"endColumn":10},{"ruleId":"80","severity":1,"message":"93","line":47,"column":8,"nodeType":"82","endLine":47,"endColumn":10,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"95","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":19},{"ruleId":"76","severity":1,"message":"77","line":87,"column":9,"nodeType":"78","messageId":"79","endLine":100,"endColumn":10},{"ruleId":"80","severity":1,"message":"96","line":32,"column":8,"nodeType":"82","endLine":32,"endColumn":10,"suggestions":"97"},{"ruleId":"80","severity":1,"message":"98","line":49,"column":8,"nodeType":"82","endLine":49,"endColumn":10,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onEditing'. Either include it or remove the dependency array.","ArrayExpression",["102"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'convertImageToBinary'. Either include it or remove the dependency array.",["103"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'props.issue.view'. Either include it or remove the dependency array. If 'setCandView' needs the current value of 'props.issue.view', you can also switch to useReducer instead of useState and read 'props.issue.view' in the reducer.",["104"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'props.opinion'. Either include it or remove the dependency array.",["105"],"React Hook useEffect has a missing dependency: 'props.user.admin'. Either include it or remove the dependency array. If 'setIsAdmin' needs the current value of 'props.user.admin', you can also switch to useReducer instead of useState and read 'props.user.admin' in the reducer.",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [editing, onEditing]",{"range":"117","text":"118"},"Update the dependencies array to be: [convertImageToBinary]",{"range":"119","text":"120"},"Update the dependencies array to be: [props.issue.view]",{"range":"121","text":"122"},"Update the dependencies array to be: [props.opinion]",{"range":"123","text":"124"},"Update the dependencies array to be: [props.user.admin]",{"range":"125","text":"126"},[3421,3430],"[editing, onEditing]",[457,459],"[convertImageToBinary]",[1257,1259],"[props.issue.view]",[1154,1156],"[props.opinion]",[1290,1292],"[props.user.admin]"]