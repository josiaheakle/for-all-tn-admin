[{"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/index.js":"1","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/App.js":"2","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/IssueHub.js":"3","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Candidate.js":"4","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateHub.js":"5","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Issue.js":"6","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateIssue.js":"7","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/LoginPage.js":"8","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/UserHandler.js":"9","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/OpinionOption.js":"10","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserHub.js":"11","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserCard.js":"12","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/DataHandler.js":"13","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/AccountHub.js":"14","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Loader.js":"15"},{"size":239,"mtime":1609094322313,"results":"16","hashOfConfig":"17"},{"size":4481,"mtime":1613073117557,"results":"18","hashOfConfig":"17"},{"size":4994,"mtime":1613071718902,"results":"19","hashOfConfig":"17"},{"size":2326,"mtime":1610727837287,"results":"20","hashOfConfig":"17"},{"size":3149,"mtime":1613072190972,"results":"21","hashOfConfig":"17"},{"size":994,"mtime":1609960263517,"results":"22","hashOfConfig":"17"},{"size":3252,"mtime":1613072751204,"results":"23","hashOfConfig":"17"},{"size":10360,"mtime":1613072725616,"results":"24","hashOfConfig":"17"},{"size":1051,"mtime":1609786244342,"results":"25","hashOfConfig":"17"},{"size":2237,"mtime":1609712941977,"results":"26","hashOfConfig":"17"},{"size":1650,"mtime":1609805252643,"results":"27","hashOfConfig":"17"},{"size":1820,"mtime":1611953102395,"results":"28","hashOfConfig":"17"},{"size":2269,"mtime":1610727346095,"results":"29","hashOfConfig":"17"},{"size":4506,"mtime":1613101277174,"results":"30","hashOfConfig":"17"},{"size":435,"mtime":1613072862795,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"uveo9l",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/index.js",[],["71","72"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/App.js",["73"],"\n// my components\nimport IssueHub from \"./IssueHub.js\"\nimport CandidateHub from \"./CandidateHub.js\"\nimport LoginPage from \"./LoginPage.js\"\nimport UserHub from \"./UserHub.js\"\n\n// my modules\nimport UserHandler from \"../modules/UserHandler.js\"\n\n// react functions\nimport { Switch, Route, BrowserRouter, Redirect, Link } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\"\nimport { ToastContainer } from \"react-toastify\"\n\n// css\nimport \"../styles/style.css\"\nimport 'react-toastify/dist/ReactToastify.css';\n\n// media \nimport bgImg from \"../media/sunsphere.jpg\"\nimport AccountHub from \"./AccountHub.js\"\nimport Loader, { LoaderContext } from \"./Loader.js\"\n\n// other\nrequire('dotenv').config();\n\n\nfunction App() {\n\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ user, setUser ] = useState(undefined);\n\n  const updateIsLoading = (bool) => {\n    setIsLoading(bool);\n  }\n\n  useEffect(() => {\n    UserHandler.setOnUserUpdate(setUser)\n\n  }, [])\n\n  useEffect(() => {\n    // console.log(`user`)\n    // console.log(user)\n  }, [user])\n\n  return (\n    <div className=\"App\" >\n      <ToastContainer hideProgressBar={true} position={'bottom-right'} limit={1} autoClose={2500} />\n      {/* style={{ backgroundImage: `url(${bgImg})` }} */}\n        <div className='background-image' ></div>\n        <BrowserRouter >\n          <LoaderContext.Provider value={{isLoading, updateIsLoading}} >\n          <Loader ></Loader>\n          <Switch>\n            <Route exact path='/'>\n              {(user===undefined) \n                ? <Redirect to='/login' /> \n                : <Redirect to='/candidates' />\n              }\n            </Route>\n            <Route path='/login' >\n              <LoginPage setUser={UserHandler.setCurrentUser} />\n                {(user!==undefined) \n                  ? <Redirect to='/candidates' /> \n                  : null\n                }\n            </Route>\n            <Route path='/issues' >\n              <div className=\"navbar\">\n                <Link className='navbar-link' to='/candidates'>Candidates</Link>\n                <Link className='navbar-link selected' to='/issues'>Issues</Link>\n                <Link className='navbar-link' to='/users'>Users</Link>\n                <Link className='navbar-link' to='/account'>Account</Link>\n\n              </div>\n              <IssueHub />\n              {(user===undefined) \n                ? <Redirect to='/login' /> \n                : null\n              }\n            </Route>\n            <Route path='/candidates'>\n              <div className=\"navbar\">\n                <Link className='navbar-link selected' to='/candidates'>Candidates</Link>\n                <Link className='navbar-link' to='/issues'>Issues</Link>\n                <Link className='navbar-link' to='/users'>Users</Link>\n                <Link className='navbar-link' to='/account'>Account</Link>\n\n              </div>\n              <CandidateHub />\n              {(user===undefined) \n                ? <Redirect to='/login' /> \n                : null\n              }\n            </Route>\n            <Route path='/users'>\n              <div className=\"navbar\">\n                <Link className='navbar-link' to='/candidates'>Candidates</Link>\n                <Link className='navbar-link' to='/issues'>Issues</Link>\n                <Link className='navbar-link selected' to='/users'>Users</Link>\n                <Link className='navbar-link' to='/account'>Account</Link>\n\n              </div>\n              <UserHub />\n              {(user===undefined) \n                ? <Redirect to='/login' /> \n                : null\n              }\n            </Route>\n            <Route path='/account'>\n              <div className=\"navbar\">\n                <Link className='navbar-link' to='/candidates'>Candidates</Link>\n                <Link className='navbar-link' to='/issues'>Issues</Link>\n                <Link className='navbar-link' to='/users'>Users</Link>\n                <Link className='navbar-link selected' to='/account'>Account</Link>\n              </div>\n              <AccountHub />\n              {(user===undefined) \n                ? <Redirect to='/login' /> \n                : null\n              }\n            </Route>\n\n            <Route path='/'>\n              {(user===undefined) \n                ? <Redirect to='/login' /> \n                : null\n              }\n            </Route>\n          </Switch>\n          </LoaderContext.Provider>\n        </BrowserRouter>\n    </div>\n\n  );\n}\n\nexport default App;\n","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/IssueHub.js",["74","75","76","77"],"\nimport {useEffect, useState, useContext} from \"react\"\nimport axios from \"axios\"\nimport Issue from \"./Issue.js\"\nimport UserHandler from \"../modules/UserHandler.js\"\nimport { toast } from \"react-toastify\"\nimport DataHandler from \"../modules/DataHandler.js\"\nimport { LoaderContext } from \"./Loader.js\"\n\nconst IssueHub = (props) => {\n\n    const [issues, setIssues] = useState([])\n    const [editing, setEditing] = useState(false)\n    const [editingIssueId, setEditingIssueId] = useState(false)\n    const [issueTitle, setIssueTitle] = useState()\n    const [issueDescr, setIssueDescr] = useState()\n    const {isLoading, updateIsLoading} = useContext(LoaderContext);\n\n\n    const editIssue = (issueId) => {\n        setEditing(true)\n        setEditingIssueId(issueId)\n    }\n\n    const openNewIssue = () => {\n        setEditing(true)\n        setEditingIssueId(false)\n    }\n\n    const onEditing = () => {\n        const issueTitleInput = document.getElementById('issue-title-input')\n        const issueDescrInput = document.getElementById('issue-descr-input')\n        let title\n        let descr\n        issues.forEach(i => {\n            if(`${i._id}` === `${editingIssueId}`) {\n                title = i.title\n                descr = i.description\n            }\n        })\n        setIssueDescr(descr)\n        setIssueTitle(title)\n        issueTitleInput.value = title || ''\n        issueDescrInput.value = descr || ''\n    }\n\n    const cancelEdit = () => {\n        setEditing(false)\n        setEditingIssueId(false)\n    }\n \n    const deleteIssue = async (issueId) => {\n        updateIsLoading(true);\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/delete/issue`,\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                issue: issueId,\n                user: UserHandler.getCurrentUser()._id\n            }\n        }\n        updateIsLoading(false)\n        const res = await axios(options)\n        if(res.data.type === 'SUCCESS') {\n            toast(res.data.message)\n\n        }\n        else toast(res.data.message)\n        setTimeout(() => {\n            importAllIssues()\n        }, 200)\n    }\n\n    const importAllIssues = async (update) => {\n        updateIsLoading(true)\n        let res = await DataHandler.getIssues(update)\n        updateIsLoading(false)\n        setIssues(res)\n    }\n\n    const createNewIssue = async (e) => {\n        e.preventDefault()\n        document.getElementById('new-issue-form').reset();\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/update/issue`,\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                title: issueTitle,\n                description: issueDescr,\n                issueID: editingIssueId,\n                user: UserHandler.getCurrentUser()._id\n            }\n        }\n        setEditing(false)\n        setEditingIssueId(false)\n        const res = await axios(options)\n        toast(res.data.message)\n        importAllIssues(true)\n    }\n\n    const updateValue = (e) => {\n        switch(e.target.id) {\n            case('issue-title-input'):  \n                setIssueTitle(e.target.value)\n                break;\n            case('issue-descr-input'):\n                setIssueDescr(e.target.value)\n                break;\n        }\n    }\n\n    useEffect(() => {\n        if(editing === true) {\n            onEditing()\n        }\n    }, [editing])\n\n    useEffect(() => {\n        importAllIssues(true)\n    }, [])\n\n    return (\n        <div className='IssueHub card'>\n            {(editing===true)?\n                <form id='new-issue-form' onSubmit={createNewIssue} >\n                    <h2> {(editing === false)? 'New' : 'Editing'} Issue</h2>\n                    <label htmlFor='issue-title-input'>Title</label>\n                    <input id='issue-title-input' onChange={updateValue}></input>\n                    <label htmlFor='issue-descr-input'>Description</label>\n                    <input id='issue-descr-input' onChange={updateValue}></input>\n                    <button type='button' onClick={cancelEdit} id='cancel-issue-button'> Cancel </button>\n                    <button type='submit' id='issue-submit-button' >Submit</button>\n                </form>\n            :\n                <div id='all-issues'> \n                    <h2>All Issues</h2>\n                    <button onClick={openNewIssue} id='new-issue-button'> New Issue </button>\n                    {issues.map((issue, i) => {\n                        return (\n                            <Issue issue={issue} key={i} onEdit={editIssue} onDelete={deleteIssue} />\n                        );\n                    })}\n                </div>\n            }\n        </div>\n    );\n\n}\n\nexport default IssueHub","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Candidate.js",["78","79","80","81"],"\nimport {useState, useEffect, Component} from 'react'\nimport CandidateIssue from './CandidateIssue'\n\nconst Candidate = (props) => {\n\n    // props - c(andidate)\n\n    const [ imgStr, setImgStr ] = useState(undefined)\n\n    const convertImageToBinary = () => {\n        let base64String = btoa(String.fromCharCode(...new Uint8Array(props.c.imgFile.data.data)));\n        setImgStr(base64String)\n    }\n\n \n    useEffect(() => {\n        convertImageToBinary()\n    }, [])\n\n    return (\n        <div className='Candidate'>\n            <div id={`${props.c._id}`} className=\"candidate-container\">\n\n                <div className='candidate-information-container'>\n                    <div className=\"candidate-sub-container\">\n                        {(props.c.imgFile)?\n                            <img src={`data:${props.c.imgFile.type};base64,${imgStr}`} className=\"candidate-image\" />\n                        :\n                            <img src={`https://for-all-tn-api.herokuapp.com/proxy-img?url=${props.c.img}`} className=\"candidate-image\" />\n                        }\n\n                    </div>\n                    <div className=\"candidate-info\">\n                        <span className='candidate-name candidate-span'>{`${props.c.first_name} ${props.c.last_name}`}</span>\n                        <span className=\"candidate-district candidate-span\">District: {`${props.c.district}`} </span>\n                    </div>\n                    <div className=\"candidate-sub-container\">\n                        {(props.c.party === \"Republican\")?\n                            <img src=\"https://foralltn.org/wp-content/uploads/2020/12/rep-icon.png\" alt={props.c.party} className=\"candidate-party-image\" />\n                        :\n                            <img src=\"https://foralltn.org/wp-content/uploads/2020/12/dem-icon.png\" alt={props.c.party} className=\"candidate-party-image\" />\n                        }\n                    </div>\n                </div>\n\n\n                <div className=\"candidate-issue-container\">\n                    {props.c.issues.map((c,i) => {\n                        return (\n                            <CandidateIssue cId={props.c._id} key={i} issue={c} />\n                        );\n                    })}\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Candidate","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateHub.js",["82","83","84"],"import Candidate from \"./Candidate.js\"\nimport {useState, useEffect, useContext} from \"react\"\n\nimport DataHandler from \"../modules/DataHandler.js\"\nimport { LoaderContext } from \"./Loader.js\"\n\nconst CandidateHub = (props) => {\n\n    const [ senators, setSenators ] = useState(undefined)\n    const [ senatorsImported, setSenatorsImported ] = useState(false)\n    const [ representatives, setRepresentatives ] = useState(undefined)\n    const [ representativesImported, setRepresentativesImported ] = useState(false)\n\n    const { isLoading, updateIsLoading } = useContext(LoaderContext);\n \n    const importAllCandidates = async (update) => {\n        updateIsLoading(true);\n        let sens = await DataHandler.getSens(update)\n        setSenators(sens)\n        setSenatorsImported(true)\n        let reps = await DataHandler.getReps(update)\n        setRepresentatives(reps)\n        setRepresentativesImported(true)\n        updateIsLoading(false);\n    }\n\n    const requestUpdate = async () => {\n        await DataHandler.requestUpdate()\n        setTimeout(() => {\n            importAllCandidates(true)\n        }, 200);\n    }\n\n    const toggleContainerOpen = (e) => {\n        if(e.target.textContent === 'Hide') e.target.textContent = 'Open' \n        else e.target.textContent = 'Hide'\n        switch(e.target.id) {\n            case('close-senators-button'):\n                let sContainer = document.getElementById('senators-container')\n                sContainer.classList.toggle('open')\n                sContainer.classList.toggle('close')\n                break;\n            case('close-representatives-button'):\n                let rContainer = document.getElementById('representatives-container')\n                rContainer.classList.toggle('open')\n                rContainer.classList.toggle('close')\n                break;\n        }\n    }\n\n    useEffect(() => {\n        importAllCandidates(true)\n    }, [])\n\n    return(\n        <div className='CandidateHub'>  \n            <button onClick={requestUpdate} id='update-candidates-button'>Update All Candidates</button>\n            <div className='candidate-header'>\n                Senators\n                <button onClick={toggleContainerOpen} id='close-senators-button' className='close-header-button'>\n                    Hide\n                </button>\n            </div>\n            <div id='senators-container' className='candidates-container open'>\n                {(senatorsImported) ? senators.map((c, i) => {\n                    return <Candidate c={c} key={i} />\n                }) : null}\n            </div>\n            <div className='candidate-header'>\n                Representatives\n                <button onClick={toggleContainerOpen} id='close-representatives-button' className='close-header-button'>\n                    Hide\n                </button>\n            </div>\n            <div id='representatives-container' className='candidates-container open'>\n                {(representativesImported) ? representatives.map((c, i) => {\n                    return <Candidate c={c} key={i} />\n                }) : null}\n            </div>\n        </div>\n    );\n}\n\nexport default CandidateHub","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Issue.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateIssue.js",["85","86"],"\n// react/ visual methods\nimport {toast} from 'react-toastify';\nimport { useContext, useEffect, useState } from \"react\";\n\n// fetch\nimport axios from \"axios\"\n\n// components\nimport OpinionOption from \"./OpinionOption.js\"\n\n// modules\nimport UserHandler from \"../modules/UserHandler.js\"\nimport { LoaderContext } from './Loader.js';\n\nconst CandidateIssue = (props) => {\n\n    // props - cId, issue \n    //          { issue (title, description), view (leans yes...)}\n\n    const [ candView, setCandView ] = useState(undefined)\n\n    const { isLoading, updateIsLoading } = useContext(LoaderContext); \n\n    const updateCandidateView = async (opinionStr) => {\n        updateIsLoading(true)\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/update/opinion`,\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                candidate: props.cId,\n                issue: props.issue.issue._id,\n                opinion: opinionStr,\n                user: UserHandler.getCurrentUser()._id\n            }\n        }\n        const res = await axios(options)\n        toast(res.data.message)\n        if(res.data.type === 'SUCCESS') {\n            setCandView(opinionStr)\n        }\n        updateIsLoading(false)\n    }\n\n    useEffect(() => {\n        setCandView(props.issue.view)\n    }, [])\n\n    return(\n        <div className='single-issue-opinion-container' >\n            <span className='candidate-issue'> {(props.issue.issue)?`${props.issue.issue.title}`:''} </span>\n            <div className='candidate-opinion-options'>\n                {(props.issue.issue)?\n                    <form className='candidate-issue-form'>\n\n                        <OpinionOption updateView={updateCandidateView} opinion='yes' cId={props.cId} initSelected={(candView==='Yes')?true:false} issue={props.issue} ></OpinionOption>\n                        <OpinionOption updateView={updateCandidateView} opinion='leans-yes' cId={props.cId} initSelected={(candView==='Leans Yes')?true:false} issue={props.issue} ></OpinionOption>\n                        <OpinionOption updateView={updateCandidateView} opinion='neutral' cId={props.cId} initSelected={(candView==='Neutral')?true:false} issue={props.issue} ></OpinionOption>\n                        <OpinionOption updateView={updateCandidateView} opinion='leans-no' cId={props.cId} initSelected={(candView==='Leans No')?true:false} issue={props.issue} ></OpinionOption>\n                        <OpinionOption updateView={updateCandidateView} opinion='no' cId={props.cId} initSelected={(candView==='No')?true:false} issue={props.issue} ></OpinionOption>\n                        <OpinionOption updateView={updateCandidateView} opinion='sponsor' cId={props.cId} initSelected={(candView==='Sponsor')?true:false} issue={props.issue} ></OpinionOption>\n                        <OpinionOption updateView={updateCandidateView} opinion='unknown' cId={props.cId} initSelected={(candView==='Unknown')?true:false} issue={props.issue} ></OpinionOption>\n\n                    </form>\n                :null}\n            </div>\n        </div>\n\n    );\n}\n\nexport default CandidateIssue;","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/LoginPage.js",["87","88","89","90","91"],"import axios from \"axios\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { LoaderContext } from \"./Loader\";\n\nconst LoginPage = (props) => {\n\n    // props - \n    //      setUser(user)  || parent function, sets user\n\n    const [ newAccount, setNewAccount ] = useState(false)\n    const [ alertMessage, setAlertMessage ] = useState(undefined)\n    const [ email, setEmail ] = useState()\n    const [ password, setPassword ] = useState()\n    const [ firstName, setFirstName ] = useState()\n    const [ lastName, setLastName ] = useState()\n    const [ resetPass, setResetPass ] = useState(false);\n    const [ newPass, setNewPass ] = useState('');\n    const [ resetCode, setResetCode ] = useState('');\n    const [ emailSent, setEmailSent ] = useState(false);\n    const [ passwordInputType, setPasswordInputType ] = useState('password');\n\n    const { isLoading, updateIsLoading } = useContext(LoaderContext); \n\n    const sendCode = async (e) =>{\n        e.preventDefault();\n        e.target.reset();\n        updateIsLoading(true)\n\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/reset/password`,\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email\n            }        \n        }\n\n        const res = await axios(options)\n        toast(res.data.message)\n        if(res.data.type === 'SUCCESS') {\n            setEmailSent(true);\n        }\n        updateIsLoading(false)\n\n\n    }\n\n    const sendResetPass = async (e) =>{\n        e.preventDefault();\n        e.target.reset();\n\n        updateIsLoading(true)\n\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/reset/code`,\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email,\n                code: resetCode,\n                newPass: password\n            }        \n        }\n\n        const res = await axios(options)\n        console.log(res)\n        toast(res.data.message)\n        if(res.data.type === 'SUCCESS') {\n            setResetPass(false);\n        }\n\n        updateIsLoading(false)\n\n    }\n\n    const loginUser = async () => {\n\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/user/login`,\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email,\n                password: password\n            }        \n        }\n\n        const res = await axios(options)\n        toast(res.data.message)\n\n        if(res.data.type === 'SUCCESS') {\n            props.setUser(res.data.user)\n        }\n\n\n    }\n\n    const createNewUser = async () => {\n\n        updateIsLoading(true)\n        const options = {\n            url: `${process.env.REACT_APP_API_URL}/user/new`,\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email,\n                password: password,\n                firstName: firstName,\n                lastName: lastName\n            }\n        }\n\n        const res = await axios(options)\n        toast(res.data.message)\n        if(res.data.type === 'SUCCESS') {\n            props.setUser(res.data.user)\n        }\n        updateIsLoading(false)\n        // console.log(res)\n\n    }\n\n    const toggleForm = () => {\n        setNewAccount(!newAccount)\n    }\n\n    const editValue = (e) => {\n\n        const value = e.target.value\n        switch(e.target.id) {\n            case('email-input'):\n                setEmail(value)\n                break;\n            case('password-input'):\n                setPassword(value)\n                break;\n            case('first-name-input'):\n                setFirstName(value)\n                break;\n            case('last-name-input'):\n                setLastName(value)\n                break;\n        }\n    }\n\n    const togglePasswordVisibility = () => {\n        setPasswordInputType((passwordInputType==='password')?'text':'password');\n        const passwordCheckbox = document.getElementById('show-password-button')\n        const passwordInput = document.getElementById('password-input')\n        if(passwordCheckbox.checked) {\n            passwordInput.type = 'text'\n        } else {\n            passwordInput.type = 'password'\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if(newAccount) {\n            createNewUser()\n        } else {\n            loginUser()\n        }\n    }\n\n    useEffect(()=>{\n        setEmail('');\n        setPasswordInputType('password');\n        setPassword('');\n        setEmailSent(false);\n    }, [resetPass])\n\n    // useEffect(() => {\n    //     // console.log(`email: ${email}, \\npassword: ${password}, \\nfirstname: ${firstName}, \\nlastname: ${lastName}`)\n    // }, [password, email, firstName, lastName])\n\n    return (\n        <div className='LoginPage'>\n\n            <div className='login-header'>\n                <h1> For All TN Scorecard Manager </h1>\n            </div>\n\n\n            {(resetPass === false) ? \n\n            <div className='login-container'>\n\n\n\n                <h2>\n                    {(!newAccount)?`Login`:`Create Account`}\n                </h2>\n                {(alertMessage)?<span id='alert-message'>{`${alertMessage}`}</span>:null}\n                {/* {(newAccount===false)? */}\n                    <form onSubmit={handleSubmit} className='login-form'> \n                        <label htmlFor='email-input'>Email</label>\n                        <input type='email' id='email-input' onChange={editValue } required='true'></input>\n                        {(newAccount===true)?\n                            <div className='align-vertical'>\n                                <label htmlFor='first-name-input'>First Name</label>\n                                <input onChange={editValue} type='text' id='first-name-input' required='true'></input>\n                                <label htmlFor='last-name-input'>Last Name</label>\n                                <input onChange={editValue} type='text' id='last-name-input' required='true'></input>\n                            </div>\n                        : null}\n                        <label htmlFor='password-input'>Password\n                            <span className='show-password-button-container'>\n                                <input onChange={togglePasswordVisibility} type='checkbox' id='show-password-button'></input>\n                                <label htmlFor='show-password-button' id='show-password-button-label'>Show</label>\n                            </span>\n                        </label>\n                            <input onChange={editValue} type={passwordInputType} id='password-input' required='true'></input>\n                        {(newAccount===false)?\n                        <button type='button' onClick={()=>{setResetPass(true)}} >Forgot your password?</button>\n                        :null}\n                        <button type='submit' >\n                            {(newAccount===true)?\n                                'Create Account'\n                            :\n                                'Login'\n                            }\n                        </button>\n\n                    </form>\n                {/* : */}\n                    {/* <form onSubmit={handleSubmit} className='new-account-form'> \n                        <label htmlFor='email-input'>Email</label>\n                        <input id='email-input' onChange={editValue}></input>\n\n\n                        <label htmlFor='password-input'>Password</label>\n                        <input type='password' id='password-input'></input>\n                        <button type='submit' >Create Account</button>\n                    </form> */}\n                {/* } */}\n                <button onClick={toggleForm}>\n                    {(!newAccount) ? `New Account` : `Use Existing Account`}\n                </button>\n\n\n            </div>\n            : \n            \n            <div className='login-container'>\n                <h2>Password Reset</h2>\n                \n                {(emailSent === false) ? \n                    <div>\n                        <form onSubmit={sendCode} className='login-form'>\n                            <label htmlFor='email-input'>Email</label>\n                            <input id='email-input' onChange={(e) => {setEmail(e.target.value)}} ></input>\n                            <button type='submit' >Reset Password</button>\n                        </form>\n                    </div>\n                :\n                    <div>\n                        <form onSubmit={sendResetPass} className='login-form'>\n                            <span className='pad-bot'>A code has been sent to your email.</span>\n                            <label htmlFor='email-input'>Code</label>\n                            <input id='email-input' onChange={(e) => {setResetCode(e.target.value)}} ></input>\n                            <label htmlFor='password-input'>Password\n                            <span className='show-password-button-container'>\n                                    <input onChange={togglePasswordVisibility} type='checkbox' id='show-password-button'></input>\n                                    <label htmlFor='show-password-button' id='show-password-button-label'>Show</label>\n                            </span>\n                            </label>\n                                <input onChange={editValue} type={passwordInputType} id='password-input' required='true'></input>\n\n                            <button type='submit' >Reset Password</button>\n                        </form>\n                    </div>\n                }\n\n                <button onClick={()=>{setResetPass(false)}}>Cancel</button>\n            </div>\n            \n            \n            }\n\n        </div>\n    );\n}\n\nexport default LoginPage","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/UserHandler.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/OpinionOption.js",["92"],"import {useState, useEffect} from \"react\"\n\nconst OpinionOption = (props) => {\n\n    // props - \n    //      opinion (yes, leans-yes, neutral, leans-no, no)\n    //      cId (candidate id)\n    //      initSelected (true/ false) - set true if it is candidate opinion\n    //      issue\n    //      onUpdate(opinionStr)\n\n    const [ selectedStr, setSelectedStr ] = useState('') // Only 'selected' or ''\n    const [ opinionStr, setOpinionStr ] = useState('') // Yes, Leans Yes, Neutral, Leans No, No\n    const [ selected, setSelected ] = useState(false) // true or false\n\n    const updateView = (e) => {\n        setSelectedStr(e.target.checked)\n        props.updateView(opinionStr)\n    }\n\n    useEffect(() => {\n        let str = props.opinion.split('-')\n        if(str.length > 1) {\n            let first = str[0].charAt(0).toUpperCase() + str[0].slice(1)\n            let second = str[1].charAt(0).toUpperCase() + str[1].slice(1)\n            setOpinionStr(`${first} ${second}`)\n        } else {\n            let first = str[0].charAt(0).toUpperCase() + str[0].slice(1)\n            setOpinionStr(first)\n        }\n        // setSelected(props.initSelected)\n    }, [])\n\n    useEffect(() => {\n        setSelected(props.initSelected)\n    }, [props.initSelected])\n\n    useEffect(() => {\n        if(selected) {\n            setSelectedStr('selected')\n        } else {\n            setSelectedStr('')\n        }\n    }, [selected])\n\n    return (\n\n        <label className={`vertical-words opinion ${props.opinion} ${selectedStr}`} htmlFor={`${props.opinion}-${props.cId}-${props.issue.issue.title}`}>\n            {opinionStr}\n            <input onChange={updateView} type='radio' value={opinionStr} id={`${props.opinion}-${props.cId}-${props.issue.issue.title}`} name='Candidate Opinion' checked={selected} ></input>\n        </label>\n\n\n        // <label className={`vertical-words opinion ${props.opinion} `} id={`${props.opinion}-${props.cId}-${props.issue.issue.title}-label`} htmlFor={`${props.opinion}-${props.cId}-${props.issue.issue.title}`}>Yes\n        //     <input type='radio' value=\"Yes\" id={`${props.opinion}-${props.cId}-${props.issue.issue.title}`} name=\"candidate-opinion\"  ></input>\n        // </label>\n    );\n}\n\nexport default OpinionOption","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserHub.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/UserCard.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/DataHandler.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/AccountHub.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Loader.js",["93","94"],"\n\nimport {createContext, useContext, useEffect} from \"react\"\n\nconst LoaderContext = createContext(false);\n\nconst Loader = () => {\n\n    const {isLoading, updateIsLoading} = useContext(LoaderContext);\n\n    return (\n        <div className='loader-container'>\n            {(isLoading === true ) ? \n                <div className='loader'></div>\n            :null}\n        </div>\n    );\n}  \n\nexport default Loader;\nexport { LoaderContext };",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":21,"column":8,"nodeType":"101","messageId":"102","endLine":21,"endColumn":13},{"ruleId":"99","severity":1,"message":"103","line":17,"column":12,"nodeType":"101","messageId":"102","endLine":17,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":112,"column":9,"nodeType":"106","messageId":"107","endLine":119,"endColumn":10},{"ruleId":"108","severity":1,"message":"109","line":126,"column":8,"nodeType":"110","endLine":126,"endColumn":17,"suggestions":"111"},{"ruleId":"108","severity":1,"message":"112","line":130,"column":8,"nodeType":"110","endLine":130,"endColumn":10,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"114","line":2,"column":30,"nodeType":"101","messageId":"102","endLine":2,"endColumn":39},{"ruleId":"108","severity":1,"message":"115","line":19,"column":8,"nodeType":"110","endLine":19,"endColumn":10,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":28,"column":29,"nodeType":"119","endLine":28,"endColumn":118},{"ruleId":"117","severity":1,"message":"118","line":30,"column":29,"nodeType":"119","endLine":30,"endColumn":138},{"ruleId":"99","severity":1,"message":"103","line":14,"column":13,"nodeType":"101","messageId":"102","endLine":14,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":37,"column":9,"nodeType":"106","messageId":"107","endLine":48,"endColumn":10},{"ruleId":"108","severity":1,"message":"120","line":53,"column":8,"nodeType":"110","endLine":53,"endColumn":10,"suggestions":"121"},{"ruleId":"99","severity":1,"message":"103","line":23,"column":13,"nodeType":"101","messageId":"102","endLine":23,"endColumn":22},{"ruleId":"108","severity":1,"message":"122","line":52,"column":8,"nodeType":"110","endLine":52,"endColumn":10,"suggestions":"123"},{"ruleId":"99","severity":1,"message":"124","line":12,"column":27,"nodeType":"101","messageId":"102","endLine":12,"endColumn":42},{"ruleId":"99","severity":1,"message":"125","line":18,"column":13,"nodeType":"101","messageId":"102","endLine":18,"endColumn":20},{"ruleId":"99","severity":1,"message":"126","line":18,"column":22,"nodeType":"101","messageId":"102","endLine":18,"endColumn":32},{"ruleId":"99","severity":1,"message":"103","line":23,"column":13,"nodeType":"101","messageId":"102","endLine":23,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":147,"column":9,"nodeType":"106","messageId":"107","endLine":160,"endColumn":10},{"ruleId":"108","severity":1,"message":"127","line":32,"column":8,"nodeType":"110","endLine":32,"endColumn":10,"suggestions":"128"},{"ruleId":"99","severity":1,"message":"129","line":3,"column":36,"nodeType":"101","messageId":"102","endLine":3,"endColumn":45},{"ruleId":"99","severity":1,"message":"130","line":9,"column":23,"nodeType":"101","messageId":"102","endLine":9,"endColumn":38},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'bgImg' is defined but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onEditing'. Either include it or remove the dependency array.","ArrayExpression",["133"],"React Hook useEffect has a missing dependency: 'importAllIssues'. Either include it or remove the dependency array.",["134"],"'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'convertImageToBinary'. Either include it or remove the dependency array.",["135"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'importAllCandidates'. Either include it or remove the dependency array.",["136"],"React Hook useEffect has a missing dependency: 'props.issue.view'. Either include it or remove the dependency array. If 'setCandView' needs the current value of 'props.issue.view', you can also switch to useReducer instead of useState and read 'props.issue.view' in the reducer.",["137"],"'setAlertMessage' is assigned a value but never used.","'newPass' is assigned a value but never used.","'setNewPass' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.opinion'. Either include it or remove the dependency array.",["138"],"'useEffect' is defined but never used.","'updateIsLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [editing, onEditing]",{"range":"151","text":"152"},"Update the dependencies array to be: [importAllIssues]",{"range":"153","text":"154"},"Update the dependencies array to be: [convertImageToBinary]",{"range":"155","text":"156"},"Update the dependencies array to be: [importAllCandidates]",{"range":"157","text":"158"},"Update the dependencies array to be: [props.issue.view]",{"range":"159","text":"160"},"Update the dependencies array to be: [props.opinion]",{"range":"161","text":"162"},[3658,3667],"[editing, onEditing]",[3729,3731],"[importAllIssues]",[458,460],"[convertImageToBinary]",[1899,1901],"[importAllCandidates]",[1447,1449],"[props.issue.view]",[1154,1156],"[props.opinion]"]