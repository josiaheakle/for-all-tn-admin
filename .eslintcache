[{"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/index.js":"1","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/App.js":"2","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/IssueHub.js":"3","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Candidate.js":"4","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateHub.js":"5","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Issue.js":"6","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateIssue.js":"7","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/LoginPage.js":"8","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/UserHandler.js":"9"},{"size":239,"mtime":1609094322313,"results":"10","hashOfConfig":"11"},{"size":2199,"mtime":1609436998972,"results":"12","hashOfConfig":"11"},{"size":3672,"mtime":1609273512650,"results":"13","hashOfConfig":"11"},{"size":3724,"mtime":1609432869191,"results":"14","hashOfConfig":"11"},{"size":4351,"mtime":1609435997901,"results":"15","hashOfConfig":"11"},{"size":959,"mtime":1609271801796,"results":"16","hashOfConfig":"11"},{"size":3586,"mtime":1609432898104,"results":"17","hashOfConfig":"11"},{"size":5203,"mtime":1609365819504,"results":"18","hashOfConfig":"11"},{"size":935,"mtime":1609436911789,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1b16adc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/index.js",[],["41","42"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/App.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/IssueHub.js",["43","44"],"\nimport {useEffect, useState} from \"react\"\nimport axios from \"axios\"\nimport Issue from \"./Issue.js\"\n\nconst IssueHub = (props) => {\n\n    const [issues, setIssues] = useState([])\n    const [editing, setEditing] = useState(false)\n    const [editingIssueId, setEditingIssueId] = useState(false)\n    const [issueTitle, setIssueTitle] = useState()\n    const [issueDescr, setIssueDescr] = useState()\n\n    const editIssue = (issueId) => {\n\n        setEditing(true)\n        setEditingIssueId(issueId)\n\n        const issueTitleInput = document.getElementById('issue-title-input')\n        const issueDescrInput = document.getElementById('issue-descr-input')\n\n        let title\n        let descr\n\n        issues.forEach(i => {\n            if(`${i._id}` === `${issueId}`) {\n                title = i.title\n                descr = i.description\n            }\n        })\n\n        setIssueDescr(descr)\n        setIssueTitle(title)\n\n        issueTitleInput.value = title\n        issueDescrInput.value = descr\n        \n    }\n\n    const deleteIssue = async (issueId) => {\n        \n\n        const options = {\n            url: 'http://localhost:4000/delete/issue',\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                issue: issueId\n            }\n        }\n\n        const res = await axios(options)\n\n        console.log(`delete responce`)\n        console.log(res)\n        setTimeout(() => {\n            importAllIssues()\n        }, 100)\n\n    }\n\n    const importAllIssues = async () => {\n        const options = {\n            url: 'http://localhost:4000/get/issues',\n            method: \"GET\"\n        }\n\n        const res = await axios(options)\n\n        console.log(`getting issues`)\n        console.log(res)\n\n        setIssues(res.data)\n\n    }\n\n    const createNewIssue = async (e) => {\n\n        e.preventDefault()\n\n        document.getElementById('new-issue-form').reset();\n\n\n        const options = {\n            url: 'http://localhost:4000/update/issue',\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                title: issueTitle,\n                description: issueDescr,\n                issueID: editingIssueId\n            }\n        }\n\n        const res = await axios(options)\n        importAllIssues()\n        console.log(res)\n    \n    }\n\n    const updateValue = (e) => {\n        switch(e.target.id) {\n            case('issue-title-input'):  \n                setIssueTitle(e.target.value)\n                break;\n            case('issue-descr-input'):\n                setIssueDescr(e.target.value)\n                break;\n        }\n    }\n\n    useEffect(() => {\n        importAllIssues()\n    }, [])\n\n    return (\n        <div className='IssueHub'>\n            <form id='new-issue-form' onSubmit={createNewIssue} >\n                <label htmlFor='issue-title-input'>Title</label>\n                <input id='issue-title-input' onChange={updateValue}></input>\n                <label htmlFor='issue-descr-input'>Description</label>\n                <input id='issue-descr-input' onChange={updateValue}></input>\n                <button type='submit' id='issue-submit-button' >Submit</button>\n            </form>\n\n            {issues.map((issue, i) => {\n                return (\n                    <Issue issue={issue} key={i} onEdit={editIssue} onDelete={deleteIssue} />\n                );\n            })}\n\n        </div>\n    );\n\n}\n\nexport default IssueHub","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Candidate.js",["45","46","47"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateHub.js",["48","49","50","51","52","53"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/Issue.js",[],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/CandidateIssue.js",["54"],"/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/components/LoginPage.js",["55","56"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\n\nconst LoginPage = (props) => {\n\n    // props - \n    //      setUser(user)  || parent function, sets user\n\n    const [ newAccount, setNewAccount ] = useState(false)\n    const [ alertMessage, setAlertMessage ] = useState(undefined)\n    const [ email, setEmail ] = useState()\n    const [ password, setPassword ] = useState()\n    const [ firstName, setFirstName ] = useState()\n    const [ lastName, setLastName ] = useState()\n\n    const loginUser = async () => {\n\n        const options = {\n            url: 'http://localhost:4000/user/login',\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email,\n                password: password\n            }        \n        }\n\n        const res = await axios(options)\n        if(res.data.type === 'SUCCESS') {\n            props.setUser(res.data.user)\n        }\n        console.log(res)\n\n\n    }\n\n    const createNewUser = async () => {\n\n        const options = {\n            url: 'http://localhost:4000/user/new',\n            method: \"POST\",\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            data: {\n                email: email,\n                password: password,\n                firstName: firstName,\n                lastName: lastName\n            }\n        }\n\n        const res = await axios(options)\n        if(res.data.type === 'SUCCESS') {\n            props.setUser(res.data.user)\n        }\n        console.log(res)\n\n    }\n\n    const toggleForm = () => {\n        setNewAccount(!newAccount)\n    }\n\n    const editValue = (e) => {\n\n        const value = e.target.value\n        switch(e.target.id) {\n            case('email-input'):\n                setEmail(value)\n                break;\n            case('password-input'):\n                setPassword(value)\n                break;\n            case('first-name-input'):\n                setFirstName(value)\n                break;\n            case('last-name-input'):\n                setLastName(value)\n                break;\n        }\n    }\n\n    const togglePasswordVisibility = () => {\n        const passwordCheckbox = document.getElementById('show-password-button')\n        const passwordInput = document.getElementById('password-input')\n        if(passwordCheckbox.checked) {\n            passwordInput.type = 'text'\n        } else {\n            passwordInput.type = 'password'\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if(newAccount) {\n            createNewUser()\n        } else {\n            loginUser()\n        }\n    }\n\n    useEffect(() => {\n        console.log(`email: ${email}, \\npassword: ${password}, \\nfirstname: ${firstName}, \\nlastname: ${lastName}`)\n    }, [password, email, firstName, lastName])\n\n    return (\n        <div className='LoginPage'>\n            {(alertMessage)?<span id='alert-message'>{`${alertMessage}`}</span>:null}\n            {/* {(newAccount===false)? */}\n                <form onSubmit={handleSubmit} className='login-form'> \n                    <label htmlFor='email-input'>Email</label>\n                    <input id='email-input' onChange={editValue}></input>\n                    {(newAccount===true)?\n                        <div>\n                            <label htmlFor='first-name-input'>First Name</label>\n                            <input onChange={editValue} type='text' id='first-name-input' ></input>\n                            <label htmlFor='last-name-input'>Last Name</label>\n                            <input onChange={editValue} type='text' id='last-name-input' ></input>\n                        </div>\n                    : null}\n                    <label htmlFor='password-input'>Password</label>\n                    <input onChange={editValue} type='password' id='password-input'></input>\n\n                    <button type='submit' >\n                        {(newAccount===true)?\n                            'Create Account'\n                        :\n                            'Login'\n                        }\n                    </button>\n\n                </form>\n            {/* : */}\n                {/* <form onSubmit={handleSubmit} className='new-account-form'> \n                    <label htmlFor='email-input'>Email</label>\n                    <input id='email-input' onChange={editValue}></input>\n\n\n                    <label htmlFor='password-input'>Password</label>\n                    <input type='password' id='password-input'></input>\n                    <button type='submit' >Create Account</button>\n                </form> */}\n            {/* } */}\n            <label htmlFor='show-password-button'>Show Password</label>\n            <input onChange={togglePasswordVisibility} type='checkbox' id='show-password-button'></input>\n            <button onClick={toggleForm}>\n                {(!newAccount) ? `New Account` : `Use Existing Account`}\n            </button>\n        </div>\n    );\n}\n\nexport default LoginPage","/home/josiah-eakle/Dev/React-Apps/for-all-tn-admin/src/modules/UserHandler.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":9,"column":12,"nodeType":"63","messageId":"64","endLine":9,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":110,"column":9,"nodeType":"67","messageId":"68","endLine":117,"endColumn":10},{"ruleId":"61","severity":1,"message":"69","line":5,"column":19,"nodeType":"63","messageId":"64","endLine":5,"endColumn":28},{"ruleId":"61","severity":1,"message":"70","line":14,"column":11,"nodeType":"63","messageId":"64","endLine":14,"endColumn":24},{"ruleId":"71","severity":1,"message":"72","line":31,"column":21,"nodeType":"73","endLine":31,"endColumn":130},{"ruleId":"61","severity":1,"message":"74","line":9,"column":13,"nodeType":"63","messageId":"64","endLine":9,"endColumn":23},{"ruleId":"61","severity":1,"message":"75","line":9,"column":25,"nodeType":"63","messageId":"64","endLine":9,"endColumn":38},{"ruleId":"61","severity":1,"message":"76","line":17,"column":13,"nodeType":"63","messageId":"64","endLine":17,"endColumn":21},{"ruleId":"61","severity":1,"message":"77","line":17,"column":23,"nodeType":"63","messageId":"64","endLine":17,"endColumn":34},{"ruleId":"65","severity":1,"message":"66","line":96,"column":9,"nodeType":"67","messageId":"68","endLine":109,"endColumn":10},{"ruleId":"78","severity":1,"message":"79","line":115,"column":8,"nodeType":"80","endLine":115,"endColumn":10,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":55,"column":8,"nodeType":"80","endLine":55,"endColumn":10,"suggestions":"83"},{"ruleId":"61","severity":1,"message":"84","line":11,"column":27,"nodeType":"63","messageId":"64","endLine":11,"endColumn":42},{"ruleId":"65","severity":1,"message":"66","line":75,"column":9,"nodeType":"67","messageId":"68","endLine":88,"endColumn":10},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'editing' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useEffect' is defined but never used.","'editCandidate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'candidates' is assigned a value but never used.","'setCandidates' is assigned a value but never used.","'imported' is assigned a value but never used.","'setImported' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'importAllCandidates'. Either include it or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has missing dependencies: 'props.cId', 'props.issue.issue.title', and 'props.issue.view'. Either include them or remove the dependency array.",["88"],"'setAlertMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [importAllCandidates]",{"range":"93","text":"94"},"Update the dependencies array to be: [props.cId, props.issue.issue.title, props.issue.view]",{"range":"95","text":"96"},[3093,3095],"[importAllCandidates]",[1244,1246],"[props.cId, props.issue.issue.title, props.issue.view]"]